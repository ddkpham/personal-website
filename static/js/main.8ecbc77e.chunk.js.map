{"version":3,"sources":["static/Logo.png","views/HomeView/video-background/index.js","views/HomeView/Button/index.js","views/HomeView/index.js","views/AboutView/index.js","views/Main/MainNav/NavItem/index.js","views/Main/MainNav/index.js","views/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MinimalCover","this","videoRef","muted","loop","play","videoOptions","src","process","ref","onClick","title","className","style","width","height","overflow","position","Component","ActionButton","Home","logo","alt","About","NavItem","props","toUpperCase","MAIN_SECTIONS","MainNav","NavItems","map","sections","Main","exact","path","component","AboutView","HomeView","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,kVC6C5BC,G,kMAvCTC,KAAKC,SAASC,OAAQ,EACtBF,KAAKC,SAASE,MAAO,EACrBH,KAAKC,SAASG,S,+BAGN,IAAD,OAEDC,EAAe,CACnBC,IAFcC,4BAGdC,IAAK,SAAAP,GACH,EAAKA,SAAWA,GAElBQ,QAAS,aAQTC,MAAO,uBAET,OACE,yBACAC,UAAU,mBACVC,MAAO,CACLC,MAAO,OACPC,OAAQ,QACRC,SAAU,SACVC,SAAU,UAER,kBAAC,IAAD,CACIX,aAAcA,S,GAnCHY,c,MCUZC,MARf,WACE,OACC,yBAAKP,UAAU,oBACb,+C,uBCgBUQ,MAlBf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKR,UAAU,QACb,yBAAKL,IAAKc,IAAMC,IAAI,OAAOR,MAAM,WAEnC,yBAAKF,UAAU,gBACb,0CACA,2CAEF,yBAAKA,UAAU,iBACb,kBAAC,EAAD,SCVOW,MANf,WACE,OACE,sC,MCWWC,MAXf,SAAiBC,GAAO,IACdd,EAAUc,EAAVd,MACR,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,oBACb,4BAAKD,EAAMe,kBCNbC,G,MAAgB,CAAC,YAAa,QAAS,SAAU,SAcxCC,MAZf,WAEE,IAAMC,EAAWF,EAAcG,KAAI,SAACC,GAAD,OAAc,kBAAC,EAAD,CAASpB,MAAOoB,OACjE,OACE,oCACE,yBAAKnB,UAAU,YACZiB,KCeMG,MAdf,WACE,OACE,yBAAKpB,UAAU,aACf,kBAAC,EAAD,MACE,6BAASA,UAAU,sBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,SAASC,UAAWC,IACtC,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAWE,Q,MCLtBC,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ecbc77e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.8cb3927f.png\";","import React, {Component} from 'react';\nimport VideoCover from 'react-video-cover';\nimport './index.scss'\nclass MinimalCover extends Component {\n\n    componentDidMount(){\n      this.videoRef.muted = true;\n      this.videoRef.loop = true;\n      this.videoRef.play();\n    }\n\n    render() {\n      let videoPath = process.env.PUBLIC_URL + '/ink.mp4'\n      const videoOptions = {\n        src: videoPath,\n        ref: videoRef => {\n          this.videoRef = videoRef;\n        },\n        onClick: () => {\n          // disable pausing for now\n          // if (this.videoRef && this.videoRef.paused) {\n          //   this.videoRef.play();\n          // } else if (this.videoRef) {\n          //   this.videoRef.pause();\n          // }\n        },\n        title: 'click to play/pause',\n      };\n      return (\n        <div \n        className=\"video-background\"\n        style={{\n          width: '100%',\n          height: '100vh',\n          overflow: 'hidden',\n          position: 'fixed',\n        }}>\n            <VideoCover\n                videoOptions={videoOptions}\n            />\n        </div>\n      );\n    }\n  }\n\nexport default MinimalCover;","import React from 'react';\n\nimport Button from '@material-ui/core/Button'\nimport './index.scss'\n\nfunction ActionButton(){ \n  return(\n   <div className=\"button-container\">\n     <h4>HIRE ME TODAY</h4>\n   </div>\n  )\n}\n\nexport default ActionButton;","import React from 'react'; \nimport VideoBackground from './video-background'\nimport ActionButton from './Button'\nimport logo from '../../static/Logo.png'\nimport './index.scss'\n\nfunction Home(){ \n  return(\n    <>\n      <VideoBackground />\n      <div className=\"logo\">\n        <img src={logo} alt=\"Logo\" width=\"100px\" />\n      </div>\n      <div className=\"name-display\">\n        <h1>David Pham</h1>\n        <h1>Developer.</h1>\n      </div>\n      <div className=\"action-button\">\n        <ActionButton />\n      </div>\n    </>\n  )\n}\n\nexport default Home;","import React from 'react';\n\nfunction About(){ \n  return(\n    <h1>ABOUT</h1>\n  )\n}\n\nexport default About;\n","import React from 'react';\nimport './index.scss'\n\n\nfunction NavItem(props){\n  const { title } = props;\n  return (\n    <div className=\"nav-item\">\n      <div className=\"border-animation\">\n        <h5>{title.toUpperCase()}</h5>\n      </div>\n    </div>\n  )\n}\n\nexport default NavItem;","import React from 'react';\nimport NavItem from './NavItem'\nimport './index.scss'\nconst MAIN_SECTIONS = ['Portfolio', 'About', 'Resume', 'Blog']\n\nfunction MainNav(){\n\n  const NavItems = MAIN_SECTIONS.map((sections) => <NavItem title={sections} /> )\n  return (\n    <>\n      <div className=\"main-nav\">\n        {NavItems}\n      </div>\n    </>\n  )\n}\n\nexport default MainNav;","import React from 'react';\nimport {\n    Route, \n    Redirect, \n    Switch, \n    Link,\n} from 'react-router-dom';\n\nimport HomeView from '../HomeView';\nimport AboutView from '../AboutView';\nimport MainNav from './MainNav'\n\nfunction Main(){ \n  return (\n    <div className=\"main-view\">\n    <MainNav />\n      <section className=\"main-view__content\">\n        <Switch>\n          <Route exact path=\"/about\" component={AboutView} />\n          <Route path=\"/\" component={HomeView} />\n        </Switch>\n      </section>\n    </div>\n )\n}\n\nexport default Main;","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport Main from './views/Main'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Main />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}